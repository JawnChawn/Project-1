#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>
#include <string.h>
#include <sys/wait.h>
#include <signal.h>
#define MAX_LINE 80

// Variables to track shell prompt count and process count
int promptCount = 1;
int processCount = 0;
pid_t foreground_pid; // To keep track of foreground process

/**
 * setup() reads in the next command line, separating it into distinct tokens
 * using whitespace as delimiters. setup() sets the args parameter as a
 * null-terminated string.
 */
void setup(char inputBuffer[], char *args[], int *background) {
	int length, /* # of characters in the command line */
    	i,  	/* loop index for accessing inputBuffer array */
    	start,  /* index where beginning of next command parameter is */
    	ct; 	/* index of where to place the next parameter into args[] */

	ct = 0;

	/* read what the user enters on the command line */
	length = read(STDIN_FILENO, inputBuffer, MAX_LINE);

	start = -1;
	if (length == 0)
    	exit(0);        	/* ^d was entered, end of user command stream */
	if (length < 0) {
    	perror("error reading the command");
    	exit(-1);       	/* terminate with error code of -1 */
	}

	/* examine character in inputBuffer */
	for (i = 0; i < length; i++) {
    	switch (inputBuffer[i]) {
        	case ' ':
        	case '\t':           	
            	if (start != -1) {
                	args[ct] = &inputBuffer[start];	/* set up pointer */
                	ct++;
            	}
            	inputBuffer[i] = '\0'; /* add a null char; make a C string */
            	start = -1;
            	break;
        	case '\n':             	/* final char examined */
            	if (start != -1) {
                	args[ct] = &inputBuffer[start];
                	ct++;
            	}
            	inputBuffer[i] = '\0';
            	args[ct] = NULL; 
            	break;
        	default:         	
            	if (start == -1)
                	start = i;
            	if (inputBuffer[i] == '&') {
                	*background = 1;
                	start = -1;
                	inputBuffer[i] = '\0';
            	}
    	}
	}
	args[ct] = NULL; /* just in case the input line was > 80 */
}

// Function handle Ctrl-\ signal
void handle_SIGQUIT(int signum) {
	char buffer[] = "Caught Ctrl-\\ signal\n";
	write(STDOUT_FILENO, buffer, strlen(buffer));
    
	// Pass the signal to foreground process if it exists
	if (foreground_pid > 0) {
    	kill(foreground_pid, SIGQUIT);
	}
}

int main(void) {
	char inputBuffer[MAX_LINE];  	/* buffer to hold command entered */
	int background;               	/* equals 1 if a command is followed by '&' */
	char *args[(MAX_LINE / 2) + 1];  

	// Set up the signal handler for SIGQUIT
	struct sigaction handler;
	handler.sa_handler = handle_SIGQUIT;
	sigaction(SIGQUIT, &handler, NULL);

	// Print greeting message with process ID
	printf("Welcome to myshell. My pid is %d.\n", getpid());

	while (1) {                  	/* Program terminates inside setup */
    	background = 0;
    	printf("JCshell[%d]: ", promptCount); 
    	fflush(stdout);
    	setup(inputBuffer, args, &background);  /* get next command */

    	// built-in commands
    	if (strcmp(args[0], "stop") == 0) {
        	//  'stop' command
        	if (args[1] != NULL) {
            	pid_t pid = atoi(args[1]);
            	if (pid > 0) {
                	if (kill(pid, SIGSTOP) == -1) {
                    	perror("kill(SIGSTOP) error");
                	}
            	} else {
                	printf("Invalid process ID\n");
            	}
        	} else {
            	printf("Usage: stop <pid>\n");
        	}
    	} else if (strcmp(args[0], "bg") == 0) {
        	// 'bg' command
        	
        	if (args[1] != NULL) {
            	pid_t pid = atoi(args[1]);
            	if (pid > 0) {
                	if (kill(pid, SIGCONT) == -1) {
                    	perror("kill(SIGCONT) error");
                	}
            	} else {
                	printf("Invalid process ID\n");
            	}
        	} else {
            	printf("Usage: bg <pid>\n");
        	}
    	} else if (strcmp(args[0], "fg") == 0) {
        	// 'fg' command 
        	
        	
        	if (args[1] != NULL) {
            	pid_t pid = atoi(args[1]);
            	if (pid > 0) {
                	if (kill(pid, SIGCONT) == -1) {
                    	perror("kill(SIGCONT) error");
                	} else {
                    	foreground_pid = pid; // Set foreground process ID
                    	waitpid(pid, NULL, 0);
                    	printf("Foreground process with PID %d complete\n", pid);
                    	foreground_pid = 0; // Reset foreground process ID
                	}
            	} else {
                	printf("Invalid process ID\n");
            	}
        	} else {
            	printf("Usage: fg <pid>\n");
        	}
    	} else if (strcmp(args[0], "kill") == 0) {
        	// 'kill' command 
        	
        	if (args[1] != NULL) {
            	pid_t pid = atoi(args[1]);
            	if (pid > 0) {
                	if (kill(pid, SIGKILL) == -1) {
                    	perror("kill(SIGKILL) error");
                	}
            	} else {
                	printf("Invalid process ID\n");
            	}
        	} else {
            	printf("Usage: kill <pid>\n");
        	}
    	} else if (strcmp(args[0], "exit") == 0) {
        	printf("myshell exiting\n");
        	exit(EXIT_SUCCESS);
    	} else {
        	// Fork a child process
        	pid_t pid = fork();
        	if (pid < 0) {
            	perror("Fork failed");
            	exit(EXIT_FAILURE);
        	} else if (pid == 0) {
            	// Child process
            	if (execvp(args[0], args) == -1) {
                	perror("execvp");
                	exit(EXIT_FAILURE);
            	}
        	} else {
            	// Parent process
            	processCount++;
            	printf("[Child pid = %d, background = %s]\n", pid, background ? "TRUE" : "FALSE");
            	if (!background) {
                	// If not a background process, wait for the child process to finish
                	waitpid(pid, NULL, 0);
                	printf("Child process complete\n");
            	}
        	}
    	}

    	// Increment the prompt count for the next iteration
    	promptCount++;
	}
	return 0;
}
